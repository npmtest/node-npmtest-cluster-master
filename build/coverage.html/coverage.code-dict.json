{"/home/travis/build/npmtest/node-npmtest-cluster-master/test.js":"/* istanbul instrument in package npmtest_cluster_master */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cluster-master/lib.npmtest_cluster_master.js":"/* istanbul instrument in package npmtest_cluster_master */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cluster_master = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cluster_master = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cluster-master/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cluster-master && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cluster_master */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cluster_master\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cluster_master.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cluster_master.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cluster_master.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cluster_master.__dirname + '/lib.npmtest_cluster_master.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cluster-master/node_modules/cluster-master/cluster-master.js":"// Set up a cluster and set up resizing and such.\n\nvar cluster = require(\"cluster\")\n, quitting = false\n, restarting = false\n, path = require(\"path\")\n, clusterSize = 0\n, env\n, os = require(\"os\")\n, onmessage\n, repl = require('repl')\n, replAddressPath = process.env.CLUSTER_MASTER_REPL || 'cluster-master-socket'\n, net = require('net')\n, fs = require('fs')\n, util = require('util')\n, minRestartAge = 2000\n, danger = false\n\nexports = module.exports = clusterMaster\nexports.restart = restart\nexports.resize = resize\nexports.quitHard = quitHard\nexports.quit = quit\n\nvar debugStreams = {}\nfunction debug () {\n  console.error.apply(console, arguments)\n\n  var msg = util.format.apply(util, arguments)\n  Object.keys(debugStreams).forEach(function (s) {\n    try {\n      // if the write fails, just remove it.\n      debugStreams[s].write(msg + '\\n')\n      if (debugStreams[s].repl) debugStreams[s].repl.displayPrompt()\n    } catch (e) {\n      delete debugStreams[s]\n    }\n  })\n}\n\n\nfunction clusterMaster (config) {\n  if (typeof config === \"string\") config = { exec: config }\n\n  if (!config.exec) {\n    throw new Error(\"Must define a 'exec' script\")\n  }\n\n  if (!cluster.isMaster) {\n    throw new Error(\"ClusterMaster answers to no one!\\n\"+\n                    \"(don't run in a cluster worker script)\")\n  }\n\n  if (cluster._clusterMaster) {\n    throw new Error(\"This cluster has a master already\")\n  }\n\n  cluster._clusterMaster = module.exports\n\n  if (typeof config.repl !== 'undefined') replAddressPath = config.repl  // allow null and false\n\n  onmessage = config.onMessage || config.onmessage\n\n  clusterSize = config.size || os.cpus().length\n\n  minRestartAge = config.minRestartAge || minRestartAge\n\n  env = config.env\n\n  var masterConf = { exec: path.resolve(config.exec) }\n  if (config.silent) masterConf.silent = true\n  if (config.env) masterConf.env = config.env\n  if (config.args) masterConf.args = config.args\n\n  cluster.setupMaster(masterConf)\n\n  if (config.signals !== false) {\n    // sighup/sigint listeners\n    setupSignals()\n  }\n\n  forkListener()\n\n  // now make it the right size\n  debug((replAddressPath) ? 'resize and then setup repl' : 'resize')\n  resize(setupRepl)\n}\n\nfunction select (field) {\n  return Object.keys(cluster.workers).map(function (k) {\n    return [k, cluster.workers[k][field]]\n  }).reduce(function (set, kv) {\n    set[kv[0]] = kv[1]\n    return set\n  }, {})\n}\n\nfunction setupRepl () {\n  if (!replAddressPath) return  // was disabled\n\n  debug('setup repl')\n  var socket = null\n  var socketAddress = undefined\n  if (typeof replAddressPath === 'string') {\n    socket = path.resolve(replAddressPath)\n  } else if (typeof replAddressPath === 'number') {\n    socket = replAddressPath\n    if (!isNaN(socket)) socket = +socket\n  } else if (replAddressPath.address && replAddressPath.port) {\n    socket = replAddressPath.port\n    socketAddress = replAddressPath.address\n  }\n  var connections = 0\n\n  if (typeof socket === 'string') {\n    fs.unlink(socket, function (er) {\n      if (er && er.code !== 'ENOENT') throw er\n      startRepl()\n    })\n  } else {\n    startRepl()\n  }\n\n  function startRepl () {\n    console.error('starting repl on '+socket+'=')\n    process.on('exit', function() {\n      try { fs.unlinkSync(socket) } catch (er) {}\n    })\n    var sockId = 0\n    var replServer = net.createServer(function (sock) {\n      connections ++\n      replEnded = false\n\n      sock.id = sockId ++\n      debugStreams['repl-' + sockId] = sock\n\n      sock.write('Starting repl #' + sock.id)\n      var r = repl.start({\n        prompt: 'ClusterMaster (`help` for cmds) ' + process.pid + ' ' + sock.id + '> ',\n        input: sock,\n        output: sock,\n        terminal: true,\n        useGlobal: false,\n        ignoreUndefined: true\n      })\n\n      var helpCommands = [\n        'help        - display these commands',\n        'repl        - access the REPL',\n        'resize(n)   - resize the cluster to `n` workers',\n        'restart(cb) - gracefully restart workers, cb is optional',\n        'stop()      - gracefully stop workers and master',\n        'kill()      - forcefully kill workers and master',\n        'cluster     - node.js cluster module',\n        'size        - current cluster size',\n        'connections - number of REPL connections to master',\n        'workers     - current workers',\n        'select(fld) - map of id to field (from workers)',\n        'pids        - map of id to pids',\n        'ages        - map of id to worker ages',\n        'states      - map of id to worker states',\n        'debug(a1)   - output `a1` to stdout and all REPLs',\n        'sock        - this REPL socket',\n        '.exit       - close this connection to the REPL'\n      ]\n\n      var context = {\n        help: helpCommands,\n        repl: r,\n        resize: resize,\n        restart: restart,\n        stop: quit,\n        kill: quitHard,\n        cluster: cluster,\n        get size () {\n          return clusterSize\n        },\n        get connections () {\n          return connections\n        },\n        get workers () {\n          var p = select('pid')\n          var s = select('state')\n          var a = select('age')\n          return Object.keys(cluster.workers).map(function (k) {\n            return new Worker({ id: k, pid: p[k], state: s[k], age: a[k] })\n          })\n        },\n        select: select,\n        get pids () {\n          return select('pid')\n        },\n        get ages () {\n          return select('age')\n        },\n        get states () {\n          return select('state')\n        },\n        // like 'wall'\n        debug: debug,\n        sock: sock\n      }\n      var desc = Object.getOwnPropertyNames(context).map(function (n) {\n        return [n, Object.getOwnPropertyDescriptor(context, n)]\n      }).reduce(function (set, kv) {\n        set[kv[0]] = kv[1]\n        return set\n      }, {})\n      Object.defineProperties(r.context, desc)\n\n      sock.repl = r\n\n      r.on('end', function () {\n        connections --\n        replEnded = true\n        if (!ended) sock.end()\n      })\n\n      sock.on('end', end)\n      sock.on('close', end)\n      sock.on('error', end)\n\n      ended = false\n      function end () {\n        if (ended) return\n        ended = true\n        if (!replEnded) r.rli.close()\n        delete debugStreams['repl-' + sockId]\n      }\n\n    })\n\n    if (socketAddress) {\n      replServer.listen(socket, socketAddress, function () {\n        debug('ClusterMaster repl listening on '+socketAddress+':'+socket)\n      })\n    } else {\n      replServer.listen(socket,  function () {\n        debug('ClusterMaster repl listening on '+socket)\n      })\n    }\n  }\n}\n\nfunction Worker (d) {\n  this.id = d.id\n  this.pid = d.pid\n  this.state = d.state\n  this.age = d.age\n}\n\nWorker.prototype.disconnect = function () {\n  cluster.workers[this.id].disconnect()\n}\n\nWorker.prototype.kill = function () {\n  process.kill(this.pid)\n}\n\n\nfunction forkListener () {\n  cluster.on(\"fork\", function (worker) {\n    worker.birth = Date.now()\n    Object.defineProperty(worker, 'age', { get: function () {\n      return Date.now() - this.birth\n    }, enumerable: true, configurable: true })\n    worker.pid = worker.process.pid\n    var id = worker.id\n    debug(\"Worker %j setting up\", id)\n    if (onmessage) worker.on(\"message\", onmessage)\n    var disconnectTimer\n\n    worker.on(\"exit\", function () {\n      clearTimeout(disconnectTimer)\n\n      if (!worker.suicide) {\n        debug(\"Worker %j exited abnormally\", id)\n        // don't respawn right away if it's a very fast failure.\n        // otherwise server crashes are hard to detect from monitors.\n        if (worker.age < minRestartAge) {\n          debug(\"Worker %j died too quickly, danger\", id)\n          danger = true\n          // still try again in a few seconds, though.\n          setTimeout(resize, 2000)\n          return\n        }\n      } else {\n        debug(\"Worker %j exited\", id)\n      }\n\n      if (Object.keys(cluster.workers).length < clusterSize && !resizing) {\n        resize()\n      }\n    })\n\n    worker.on(\"disconnect\", function () {\n      debug(\"Worker %j disconnect\", id)\n      // give it 1 second to shut down gracefully, or kill\n      disconnectTimer = setTimeout(function () {\n        debug(\"Worker %j, forcefully killing\", id)\n        worker.process.kill(\"SIGKILL\")\n      }, 5000)\n    })\n  })\n}\n\nfunction restart (cb) {\n  if (restarting) {\n    debug(\"Already restarting.  Cannot restart yet.\")\n    return\n  }\n\n  restarting = true\n\n  // graceful restart.\n  // all the existing workers get killed, and this\n  // causes new ones to be spawned.  If there aren't\n  // already the intended number, then fork new extras.\n  var current = Object.keys(cluster.workers)\n  , length = current.length\n  , reqs = clusterSize - length\n\n  var i = 0\n\n  // if we're resizing, then just kill off a few.\n  if (reqs !== 0) {\n    debug('resize %d -> %d, change = %d',\n                  current.length, clusterSize, reqs)\n\n    return resize(clusterSize, function () {\n      debug('resize cb')\n      length = clusterSize\n      graceful()\n    })\n  }\n\n  // all the current workers, kill and then wait for a\n  // new one to spawn before moving on.\n  graceful()\n  function graceful () {\n    debug(\"graceful %d of %d\", i, length)\n    if (i >= current.length) {\n      debug(\"graceful completion\")\n      restarting = false\n      return cb && cb()\n    }\n\n    var first = (i === 0)\n    , id = current[i++]\n    , worker = cluster.workers[id]\n\n    if (quitting) {\n      if (worker && worker.process.connected) {\n        worker.disconnect()\n      }\n      return graceful()\n    }\n\n    // start a new one. if it lives for 2 seconds, kill the worker.\n    if (first) {\n      cluster.once('listening', function (newbie) {\n        var timer = setTimeout(function () {\n          newbie.removeListener('exit', skeptic)\n          if (worker && worker.process.connected) {\n            worker.disconnect()\n          }\n          graceful()\n        }, 2000)\n        newbie.on('exit', skeptic)\n        function skeptic () {\n          debug('New worker died quickly. Aborting restart.')\n          restarting = false\n          clearTimeout(timer)\n        }\n      })\n    } else {\n      cluster.once('listening', function (newbie) {\n        if (worker && worker.process.connected) {\n          worker.disconnect()\n        }\n      })\n      graceful()\n    }\n\n    cluster.fork(env)\n  }\n}\n\n\n\nvar resizing = false\nvar resizeCbs = []\nfunction resize (n, cb_) {\n  if (typeof n === 'function') cb_ = n, n = clusterSize\n\n  if (cb_)\n    resizeCbs.push(cb_)\n\n  if (resizing)\n    return\n\n  function cb() {\n    console.error('done resizing')\n\n    resizing = false\n    var q = resizeCbs.slice(0)\n    resizeCbs.length = 0\n    q.forEach(function(c) {\n      c()\n    })\n    if (clusterSize !== Object.keys(cluster.workers).length) {\n      if (danger && clusterSize === 0) {\n        debug('DANGER! something bad has happened')\n        process.exit(1)\n      } else {\n        danger = true\n        debug('DANGER! wrong number of workers')\n        setTimeout(resize, 1000)\n      }\n    } else {\n      danger = false\n    }\n  }\n\n  if (n >= 0) clusterSize = n\n  var current = Object.keys(cluster.workers)\n  , c = current.length\n  , req = clusterSize - c\n\n  // avoid angry \"listening\" listeners\n  cluster.setMaxListeners(clusterSize * 2)\n\n  if (c === clusterSize) {\n    resizing = false\n    return cb()\n  }\n\n  var thenCnt = 0\n  function then () {\n    thenCnt ++\n    return then2\n  }\n  function then2 () {\n    if (--thenCnt === 0) {\n      resizing = false\n      return cb()\n    }\n  }\n\n  // make us have the right number of them.\n  if (req > 0) while (req -- > 0) {\n    debug('resizing up', req)\n    cluster.once('listening', then())\n    cluster.fork(env)\n  } else for (var i = clusterSize; i < c; i ++) {\n    var worker = cluster.workers[current[i]]\n    debug('resizing down', current[i])\n    worker.once('exit', then())\n    if (worker && worker.process.connected) {\n      worker.disconnect()\n    }\n  }\n}\n\n\n\nfunction quitHard () {\n  quitting = true\n  quit()\n}\n\n\n\nfunction quit () {\n  if (quitting) {\n    debug(\"Forceful shutdown\")\n    // last ditch effort to force-kill all workers.\n    Object.keys(cluster.workers).forEach(function (id) {\n      var w = cluster.workers[id]\n      if (w && w.process) w.process.kill(\"SIGKILL\")\n    })\n    process.exit(1)\n  }\n\n  debug(\"Graceful shutdown...\")\n  clusterSize = 0\n  quitting = true\n  restart(function () {\n    debug(\"Graceful shutdown successful\")\n    process.exit(0)\n  })\n}\n\n\nfunction setupSignals () {\n  try {\n    process.on(\"SIGHUP\", restart)\n    process.on(\"SIGINT\", quit)\n  } catch (e) {\n    // Must be on Windows, waaa-waaah.\n  }\n\n  process.on(\"exit\", function () {\n    if (!quitting) quitHard()\n  })\n}\n"}